// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("phi-node.ll", getGlobalContext());
 mod->setDataLayout("0x1d25dd8");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 
 // Function Declarations
 
 Function* func_test_ = mod->getFunction("test_");
 if (!func_test_) {
 func_test_ = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"test_", mod); 
 func_test_->setCallingConv(CallingConv::C);
 }
 AttributeSet func_test__PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_test__PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_test_->setAttributes(func_test__PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_2 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_3 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int1_4 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("-1"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: test_ (func_test_)
 {
  
  BasicBlock* label_5 = BasicBlock::Create(mod->getContext(), "",func_test_,0);
  BasicBlock* label_6 = BasicBlock::Create(mod->getContext(), "",func_test_,0);
  BasicBlock* label_7 = BasicBlock::Create(mod->getContext(), "",func_test_,0);
  
  // Block  (label_5)
  AllocaInst* ptr_x = new AllocaInst(IntegerType::get(mod->getContext(), 32), "x", label_5);
  ptr_x->setAlignment(4);
  AllocaInst* ptr_y = new AllocaInst(IntegerType::get(mod->getContext(), 32), "y", label_5);
  ptr_y->setAlignment(4);
  AllocaInst* ptr_z = new AllocaInst(IntegerType::get(mod->getContext(), 32), "z", label_5);
  ptr_z->setAlignment(4);
  StoreInst* void_8 = new StoreInst(const_int32_3, ptr_x, false, label_5);
  void_8->setAlignment(4);
  StoreInst* void_9 = new StoreInst(const_int32_3, ptr_y, false, label_5);
  void_9->setAlignment(4);
  StoreInst* void_10 = new StoreInst(const_int32_3, ptr_z, false, label_5);
  void_10->setAlignment(4);
  LoadInst* int32_11 = new LoadInst(ptr_y, "", false, label_5);
  int32_11->setAlignment(4);
  ICmpInst* int1_12 = new ICmpInst(*label_5, ICmpInst::ICMP_NE, int32_11, const_int32_3, "");
  BranchInst::Create(label_7, label_6, int1_12, label_5);
  
  // Block  (label_6)
  LoadInst* int32_14 = new LoadInst(ptr_z, "", false, label_6);
  int32_14->setAlignment(4);
  ICmpInst* int1_15 = new ICmpInst(*label_6, ICmpInst::ICMP_NE, int32_14, const_int32_3, "");
  BranchInst::Create(label_7, label_6);
  
  // Block  (label_7)
  PHINode* int1_17 = PHINode::Create(IntegerType::get(mod->getContext(), 1), 2, "", label_7);
  int1_17->addIncoming(const_int1_4, label_5);
  int1_17->addIncoming(int1_15, label_6);
  
  CastInst* int32_18 = new ZExtInst(int1_17, IntegerType::get(mod->getContext(), 32), "", label_7);
  StoreInst* void_19 = new StoreInst(int32_18, ptr_x, false, label_7);
  void_19->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_7);
  
 }
 
 return mod;
}
