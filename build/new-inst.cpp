// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("new-inst.ll", getGlobalContext());
 mod->setDataLayout("0x18458f8");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 8),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_1_args;
 FunctionType* FuncTy_1 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 16),
  /*Params=*/FuncTy_1_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_2_args;
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_3_args;
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_4_args;
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 FuncTy_4_args.push_back(PointerTy_5);
 FuncTy_4_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(PointerTy_5, 0);
 
 PointerType* PointerTy_7 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_0, 0);
 
 std::vector<Type*>FuncTy_9_args;
 FuncTy_9_args.push_back(PointerTy_5);
 FuncTy_9_args.push_back(IntegerType::get(mod->getContext(), 8));
 FuncTy_9_args.push_back(IntegerType::get(mod->getContext(), 8));
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_10_args;
 PointerType* PointerTy_11 = PointerType::get(IntegerType::get(mod->getContext(), 16), 0);
 
 FuncTy_10_args.push_back(PointerTy_11);
 FuncTy_10_args.push_back(IntegerType::get(mod->getContext(), 16));
 FuncTy_10_args.push_back(IntegerType::get(mod->getContext(), 16));
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(PointerTy_11, 0);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(PointerTy_7);
 FuncTy_13_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_13_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_14 = PointerType::get(PointerTy_7, 0);
 
 std::vector<Type*>FuncTy_15_args;
 PointerType* PointerTy_16 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 FuncTy_15_args.push_back(PointerTy_16);
 FuncTy_15_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_15_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_15 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_15_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_17 = PointerType::get(PointerTy_16, 0);
 
 std::vector<Type*>FuncTy_18_args;
 FuncTy_18_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_18_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_18 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_18_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_19_args;
 FunctionType* FuncTy_19 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_19_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_20 = PointerType::get(FuncTy_2, 0);
 
 PointerType* PointerTy_21 = PointerType::get(FuncTy_18, 0);
 
 std::vector<Type*>FuncTy_23_args;
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_23 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_23_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_22 = PointerType::get(FuncTy_23, 0);
 
 std::vector<Type*>FuncTy_24_args;
 FuncTy_24_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_24 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_24_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_25 = PointerType::get(FuncTy_24, 0);
 
 std::vector<Type*>FuncTy_27_args;
 FuncTy_27_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_27_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_27 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_27_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_26 = PointerType::get(FuncTy_27, 0);
 
 
 // Function Declarations
 
 Function* func_mksym_i8 = mod->getFunction("mksym_i8");
 if (!func_mksym_i8) {
 func_mksym_i8 = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"mksym_i8", mod); 
 func_mksym_i8->setCallingConv(CallingConv::C);
 }
 AttributeSet func_mksym_i8_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::SExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_mksym_i8_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_mksym_i8->setAttributes(func_mksym_i8_PAL);

Function* func_mksym_i16 = mod->getFunction("mksym_i16");
if (!func_mksym_i16) {
func_mksym_i16 = Function::Create(
 /*Type=*/FuncTy_1,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_i16", mod); 
func_mksym_i16->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_i16_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::SExt);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_mksym_i16_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_mksym_i16->setAttributes(func_mksym_i16_PAL);

Function* func_mksym_i32 = mod->getFunction("mksym_i32");
if (!func_mksym_i32) {
func_mksym_i32 = Function::Create(
 /*Type=*/FuncTy_2,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_i32", mod); 
func_mksym_i32->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_i32_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_mksym_i32_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_mksym_i32->setAttributes(func_mksym_i32_PAL);

Function* func_mksym_i64 = mod->getFunction("mksym_i64");
if (!func_mksym_i64) {
func_mksym_i64 = Function::Create(
 /*Type=*/FuncTy_3,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_i64", mod); 
func_mksym_i64->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_i64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_mksym_i64_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_mksym_i64->setAttributes(func_mksym_i64_PAL);

Function* func_mksym_u8 = mod->getFunction("mksym_u8");
if (!func_mksym_u8) {
func_mksym_u8 = Function::Create(
 /*Type=*/FuncTy_0,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_u8", mod); 
func_mksym_u8->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_u8_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_mksym_u8_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_mksym_u8->setAttributes(func_mksym_u8_PAL);

Function* func_mksym_u16 = mod->getFunction("mksym_u16");
if (!func_mksym_u16) {
func_mksym_u16 = Function::Create(
 /*Type=*/FuncTy_1,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_u16", mod); 
func_mksym_u16->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_u16_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_mksym_u16_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_mksym_u16->setAttributes(func_mksym_u16_PAL);

Function* func_mksym_u32 = mod->getFunction("mksym_u32");
if (!func_mksym_u32) {
func_mksym_u32 = Function::Create(
 /*Type=*/FuncTy_2,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_u32", mod); 
func_mksym_u32->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_u32_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_mksym_u32_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_mksym_u32->setAttributes(func_mksym_u32_PAL);

Function* func_mksym_u64 = mod->getFunction("mksym_u64");
if (!func_mksym_u64) {
func_mksym_u64 = Function::Create(
 /*Type=*/FuncTy_3,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"mksym_u64", mod); 
func_mksym_u64->setCallingConv(CallingConv::C);
}
AttributeSet func_mksym_u64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_mksym_u64_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_mksym_u64->setAttributes(func_mksym_u64_PAL);

Function* func_init_buff = mod->getFunction("init_buff");
if (!func_init_buff) {
func_init_buff = Function::Create(
 /*Type=*/FuncTy_4,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"init_buff", mod); 
func_init_buff->setCallingConv(CallingConv::C);
}
AttributeSet func_init_buff_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_init_buff_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_init_buff->setAttributes(func_init_buff_PAL);

Function* func_limit2_i8 = mod->getFunction("limit2_i8");
if (!func_limit2_i8) {
func_limit2_i8 = Function::Create(
 /*Type=*/FuncTy_9,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_i8", mod); 
func_limit2_i8->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_i8_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::SExt);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::SExt);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_limit2_i8_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_limit2_i8->setAttributes(func_limit2_i8_PAL);

Function* func_limit2_i16 = mod->getFunction("limit2_i16");
if (!func_limit2_i16) {
func_limit2_i16 = Function::Create(
 /*Type=*/FuncTy_10,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_i16", mod); 
func_limit2_i16->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_i16_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::SExt);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::SExt);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_limit2_i16_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_limit2_i16->setAttributes(func_limit2_i16_PAL);

Function* func_limit2_i32 = mod->getFunction("limit2_i32");
if (!func_limit2_i32) {
func_limit2_i32 = Function::Create(
 /*Type=*/FuncTy_13,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_i32", mod); 
func_limit2_i32->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_i32_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_limit2_i32_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_limit2_i32->setAttributes(func_limit2_i32_PAL);

Function* func_limit2_i64 = mod->getFunction("limit2_i64");
if (!func_limit2_i64) {
func_limit2_i64 = Function::Create(
 /*Type=*/FuncTy_15,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_i64", mod); 
func_limit2_i64->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_i64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_limit2_i64_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_limit2_i64->setAttributes(func_limit2_i64_PAL);

Function* func_limit2_u8 = mod->getFunction("limit2_u8");
if (!func_limit2_u8) {
func_limit2_u8 = Function::Create(
 /*Type=*/FuncTy_9,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_u8", mod); 
func_limit2_u8->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_u8_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ZExt);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_limit2_u8_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_limit2_u8->setAttributes(func_limit2_u8_PAL);

Function* func_limit2_u16 = mod->getFunction("limit2_u16");
if (!func_limit2_u16) {
func_limit2_u16 = Function::Create(
 /*Type=*/FuncTy_10,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_u16", mod); 
func_limit2_u16->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_u16_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ZExt);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_limit2_u16_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_limit2_u16->setAttributes(func_limit2_u16_PAL);

Function* func_limit2_u32 = mod->getFunction("limit2_u32");
if (!func_limit2_u32) {
func_limit2_u32 = Function::Create(
 /*Type=*/FuncTy_13,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_u32", mod); 
func_limit2_u32->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_u32_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_limit2_u32_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_limit2_u32->setAttributes(func_limit2_u32_PAL);

Function* func_limit2_u64 = mod->getFunction("limit2_u64");
if (!func_limit2_u64) {
func_limit2_u64 = Function::Create(
 /*Type=*/FuncTy_15,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"limit2_u64", mod); 
func_limit2_u64->setCallingConv(CallingConv::C);
}
AttributeSet func_limit2_u64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_limit2_u64_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_limit2_u64->setAttributes(func_limit2_u64_PAL);

Function* func_func = mod->getFunction("func");
if (!func_func) {
func_func = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"func", mod); 
func_func->setCallingConv(CallingConv::C);
}
AttributeSet func_func_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_func_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_func->setAttributes(func_func_PAL);

Function* func_test_AND = mod->getFunction("test_AND");
if (!func_test_AND) {
func_test_AND = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"test_AND", mod); 
func_test_AND->setCallingConv(CallingConv::C);
}
AttributeSet func_test_AND_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_test_AND_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_test_AND->setAttributes(func_test_AND_PAL);

Function* func_gen_func = mod->getFunction("gen_func");
if (!func_gen_func) {
func_gen_func = Function::Create(
 /*Type=*/FuncTy_23,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"gen_func", mod); // (external, no body)
func_gen_func->setCallingConv(CallingConv::C);
}
AttributeSet func_gen_func_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_gen_func_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_gen_func->setAttributes(func_gen_func_PAL);

Function* func_select = mod->getFunction("select");
if (!func_select) {
func_select = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"select", mod); 
func_select->setCallingConv(CallingConv::C);
}
AttributeSet func_select_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_select_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_select->setAttributes(func_select_PAL);

Function* func_test_SELECT = mod->getFunction("test_SELECT");
if (!func_test_SELECT) {
func_test_SELECT = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"test_SELECT", mod); 
func_test_SELECT->setCallingConv(CallingConv::C);
}
AttributeSet func_test_SELECT_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_test_SELECT_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_test_SELECT->setAttributes(func_test_SELECT_PAL);

Function* func_gen_select = mod->getFunction("gen_select");
if (!func_gen_select) {
func_gen_select = Function::Create(
 /*Type=*/FuncTy_23,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"gen_select", mod); // (external, no body)
func_gen_select->setCallingConv(CallingConv::C);
}
AttributeSet func_gen_select_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_gen_select_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_gen_select->setAttributes(func_gen_select_PAL);

Function* func_the_switch = mod->getFunction("the_switch");
if (!func_the_switch) {
func_the_switch = Function::Create(
 /*Type=*/FuncTy_24,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"the_switch", mod); 
func_the_switch->setCallingConv(CallingConv::C);
}
AttributeSet func_the_switch_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_the_switch_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_the_switch->setAttributes(func_the_switch_PAL);

Function* func_test_the_switch = mod->getFunction("test_the_switch");
if (!func_test_the_switch) {
func_test_the_switch = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"test_the_switch", mod); 
func_test_the_switch->setCallingConv(CallingConv::C);
}
AttributeSet func_test_the_switch_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_test_the_switch_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_test_the_switch->setAttributes(func_test_the_switch_PAL);

Function* func_gen_the_switch = mod->getFunction("gen_the_switch");
if (!func_gen_the_switch) {
func_gen_the_switch = Function::Create(
 /*Type=*/FuncTy_27,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"gen_the_switch", mod); // (external, no body)
func_gen_the_switch->setCallingConv(CallingConv::C);
}
AttributeSet func_gen_the_switch_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_gen_the_switch_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_gen_the_switch->setAttributes(func_gen_the_switch_PAL);

// Global Variable Declarations


// Constant Definitions
ConstantInt* const_int8_28 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("0"), 10));
ConstantInt* const_int16_29 = ConstantInt::get(mod->getContext(), APInt(16, StringRef("0"), 10));
ConstantInt* const_int32_30 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int64_31 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int32_32 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int1_33 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("0"), 10));
ConstantInt* const_int32_34 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
ConstantInt* const_int32_35 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("7"), 10));
ConstantInt* const_int32_36 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
ConstantInt* const_int32_37 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
ConstantInt* const_int32_38 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("20"), 10));
ConstantInt* const_int32_39 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("30"), 10));
ConstantInt* const_int32_40 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("42"), 10));

// Global Variable Definitions

// Function Definitions

// Function: mksym_i8 (func_mksym_i8)
{
 
 BasicBlock* label_41 = BasicBlock::Create(mod->getContext(), "",func_mksym_i8,0);
 
 // Block  (label_41)
 ReturnInst::Create(mod->getContext(), const_int8_28, label_41);
 
}

// Function: mksym_i16 (func_mksym_i16)
{
 
 BasicBlock* label_43 = BasicBlock::Create(mod->getContext(), "",func_mksym_i16,0);
 
 // Block  (label_43)
 ReturnInst::Create(mod->getContext(), const_int16_29, label_43);
 
}

// Function: mksym_i32 (func_mksym_i32)
{
 
 BasicBlock* label_45 = BasicBlock::Create(mod->getContext(), "",func_mksym_i32,0);
 
 // Block  (label_45)
 ReturnInst::Create(mod->getContext(), const_int32_30, label_45);
 
}

// Function: mksym_i64 (func_mksym_i64)
{
 
 BasicBlock* label_47 = BasicBlock::Create(mod->getContext(), "",func_mksym_i64,0);
 
 // Block  (label_47)
 ReturnInst::Create(mod->getContext(), const_int64_31, label_47);
 
}

// Function: mksym_u8 (func_mksym_u8)
{
 
 BasicBlock* label_49 = BasicBlock::Create(mod->getContext(), "",func_mksym_u8,0);
 
 // Block  (label_49)
 ReturnInst::Create(mod->getContext(), const_int8_28, label_49);
 
}

// Function: mksym_u16 (func_mksym_u16)
{
 
 BasicBlock* label_51 = BasicBlock::Create(mod->getContext(), "",func_mksym_u16,0);
 
 // Block  (label_51)
 ReturnInst::Create(mod->getContext(), const_int16_29, label_51);
 
}

// Function: mksym_u32 (func_mksym_u32)
{
 
 BasicBlock* label_53 = BasicBlock::Create(mod->getContext(), "",func_mksym_u32,0);
 
 // Block  (label_53)
 ReturnInst::Create(mod->getContext(), const_int32_30, label_53);
 
}

// Function: mksym_u64 (func_mksym_u64)
{
 
 BasicBlock* label_55 = BasicBlock::Create(mod->getContext(), "",func_mksym_u64,0);
 
 // Block  (label_55)
 ReturnInst::Create(mod->getContext(), const_int64_31, label_55);
 
}

// Function: init_buff (func_init_buff)
{
 Function::arg_iterator args = func_init_buff->arg_begin();
 Value* ptr_buff = args++;
 ptr_buff->setName("buff");
 Value* int32_len = args++;
 int32_len->setName("len");
 
 BasicBlock* label_57 = BasicBlock::Create(mod->getContext(), "",func_init_buff,0);
 BasicBlock* label_58 = BasicBlock::Create(mod->getContext(), "",func_init_buff,0);
 BasicBlock* label_59 = BasicBlock::Create(mod->getContext(), "",func_init_buff,0);
 BasicBlock* label_60 = BasicBlock::Create(mod->getContext(), "",func_init_buff,0);
 BasicBlock* label_61 = BasicBlock::Create(mod->getContext(), "",func_init_buff,0);
 
 // Block  (label_57)
 AllocaInst* ptr_62 = new AllocaInst(PointerTy_5, "", label_57);
 ptr_62->setAlignment(8);
 AllocaInst* ptr_63 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_57);
 ptr_63->setAlignment(4);
 AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_57);
 ptr_i->setAlignment(4);
 StoreInst* void_64 = new StoreInst(ptr_buff, ptr_62, false, label_57);
 void_64->setAlignment(8);
 StoreInst* void_65 = new StoreInst(int32_len, ptr_63, false, label_57);
 void_65->setAlignment(4);
 StoreInst* void_66 = new StoreInst(const_int32_30, ptr_i, false, label_57);
 void_66->setAlignment(4);
 BranchInst::Create(label_58, label_57);
 
 // Block  (label_58)
 LoadInst* int32_68 = new LoadInst(ptr_i, "", false, label_58);
 int32_68->setAlignment(4);
 LoadInst* int32_69 = new LoadInst(ptr_63, "", false, label_58);
 int32_69->setAlignment(4);
 ICmpInst* int1_70 = new ICmpInst(*label_58, ICmpInst::ICMP_SLT, int32_68, int32_69, "");
 BranchInst::Create(label_59, label_61, int1_70, label_58);
 
 // Block  (label_59)
 CallInst* int8_72 = CallInst::Create(func_mksym_i8, "", label_59);
 int8_72->setCallingConv(CallingConv::C);
 int8_72->setTailCall(false);
 AttributeSet int8_72_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::SExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  int8_72_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int8_72->setAttributes(int8_72_PAL);
 
 LoadInst* int32_73 = new LoadInst(ptr_i, "", false, label_59);
 int32_73->setAlignment(4);
 CastInst* int64_74 = new SExtInst(int32_73, IntegerType::get(mod->getContext(), 64), "", label_59);
 LoadInst* ptr_75 = new LoadInst(ptr_62, "", false, label_59);
 ptr_75->setAlignment(8);
 GetElementPtrInst* ptr_76 = GetElementPtrInst::Create(ptr_75, int64_74, "", label_59);
 StoreInst* void_77 = new StoreInst(int8_72, ptr_76, false, label_59);
 void_77->setAlignment(1);
 BranchInst::Create(label_60, label_59);
 
 // Block  (label_60)
 LoadInst* int32_79 = new LoadInst(ptr_i, "", false, label_60);
 int32_79->setAlignment(4);
 BinaryOperator* int32_80 = BinaryOperator::Create(Instruction::Add, int32_79, const_int32_32, "", label_60);
 StoreInst* void_81 = new StoreInst(int32_80, ptr_i, false, label_60);
 void_81->setAlignment(4);
 BranchInst::Create(label_58, label_60);
 
 // Block  (label_61)
 LoadInst* int32_83 = new LoadInst(ptr_63, "", false, label_61);
 int32_83->setAlignment(4);
 BinaryOperator* int32_84 = BinaryOperator::Create(Instruction::Sub, int32_83, const_int32_32, "", label_61);
 CastInst* int64_85 = new SExtInst(int32_84, IntegerType::get(mod->getContext(), 64), "", label_61);
 LoadInst* ptr_86 = new LoadInst(ptr_62, "", false, label_61);
 ptr_86->setAlignment(8);
 GetElementPtrInst* ptr_87 = GetElementPtrInst::Create(ptr_86, int64_85, "", label_61);
 StoreInst* void_88 = new StoreInst(const_int8_28, ptr_87, false, label_61);
 void_88->setAlignment(1);
 ReturnInst::Create(mod->getContext(), label_61);
 
}

// Function: limit2_i8 (func_limit2_i8)
{
 Function::arg_iterator args = func_limit2_i8->arg_begin();
 Value* ptr_x = args++;
 ptr_x->setName("x");
 Value* int8_lower = args++;
 int8_lower->setName("lower");
 Value* int8_upper = args++;
 int8_upper->setName("upper");
 
 BasicBlock* label_90 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 BasicBlock* label_91 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 BasicBlock* label_92 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 BasicBlock* label_93 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 BasicBlock* label_94 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 BasicBlock* label_95 = BasicBlock::Create(mod->getContext(), "",func_limit2_i8,0);
 
 // Block  (label_90)
 AllocaInst* ptr_96 = new AllocaInst(PointerTy_5, "", label_90);
 ptr_96->setAlignment(8);
 AllocaInst* ptr_97 = new AllocaInst(IntegerType::get(mod->getContext(), 8), "", label_90);
 ptr_97->setAlignment(1);
 AllocaInst* ptr_98 = new AllocaInst(IntegerType::get(mod->getContext(), 8), "", label_90);
 ptr_98->setAlignment(1);
 StoreInst* void_99 = new StoreInst(ptr_x, ptr_96, false, label_90);
 void_99->setAlignment(8);
 StoreInst* void_100 = new StoreInst(int8_lower, ptr_97, false, label_90);
 void_100->setAlignment(1);
 StoreInst* void_101 = new StoreInst(int8_upper, ptr_98, false, label_90);
 void_101->setAlignment(1);
 LoadInst* ptr_102 = new LoadInst(ptr_96, "", false, label_90);
 ptr_102->setAlignment(8);
 LoadInst* int8_103 = new LoadInst(ptr_102, "", false, label_90);
 int8_103->setAlignment(1);
 CastInst* int32_104 = new SExtInst(int8_103, IntegerType::get(mod->getContext(), 32), "", label_90);
 LoadInst* int8_105 = new LoadInst(ptr_98, "", false, label_90);
 int8_105->setAlignment(1);
 CastInst* int32_106 = new SExtInst(int8_105, IntegerType::get(mod->getContext(), 32), "", label_90);
 ICmpInst* int1_107 = new ICmpInst(*label_90, ICmpInst::ICMP_SGE, int32_104, int32_106, "");
 BranchInst::Create(label_91, label_92, int1_107, label_90);
 
 // Block  (label_91)
 LoadInst* int8_109 = new LoadInst(ptr_98, "", false, label_91);
 int8_109->setAlignment(1);
 LoadInst* ptr_110 = new LoadInst(ptr_96, "", false, label_91);
 ptr_110->setAlignment(8);
 StoreInst* void_111 = new StoreInst(int8_109, ptr_110, false, label_91);
 void_111->setAlignment(1);
 BranchInst::Create(label_95, label_91);
 
 // Block  (label_92)
 LoadInst* ptr_113 = new LoadInst(ptr_96, "", false, label_92);
 ptr_113->setAlignment(8);
 LoadInst* int8_114 = new LoadInst(ptr_113, "", false, label_92);
 int8_114->setAlignment(1);
 CastInst* int32_115 = new SExtInst(int8_114, IntegerType::get(mod->getContext(), 32), "", label_92);
 LoadInst* int8_116 = new LoadInst(ptr_97, "", false, label_92);
 int8_116->setAlignment(1);
 CastInst* int32_117 = new SExtInst(int8_116, IntegerType::get(mod->getContext(), 32), "", label_92);
 ICmpInst* int1_118 = new ICmpInst(*label_92, ICmpInst::ICMP_SLE, int32_115, int32_117, "");
 BranchInst::Create(label_93, label_94, int1_118, label_92);
 
 // Block  (label_93)
 LoadInst* int8_120 = new LoadInst(ptr_97, "", false, label_93);
 int8_120->setAlignment(1);
 LoadInst* ptr_121 = new LoadInst(ptr_96, "", false, label_93);
 ptr_121->setAlignment(8);
 StoreInst* void_122 = new StoreInst(int8_120, ptr_121, false, label_93);
 void_122->setAlignment(1);
 BranchInst::Create(label_94, label_93);
 
 // Block  (label_94)
 BranchInst::Create(label_95, label_94);
 
 // Block  (label_95)
 ReturnInst::Create(mod->getContext(), label_95);
 
}

// Function: limit2_i16 (func_limit2_i16)
{
 Function::arg_iterator args = func_limit2_i16->arg_begin();
 Value* ptr_x_126 = args++;
 ptr_x_126->setName("x");
 Value* int16_lower = args++;
 int16_lower->setName("lower");
 Value* int16_upper = args++;
 int16_upper->setName("upper");
 
 BasicBlock* label_127 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 BasicBlock* label_128 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 BasicBlock* label_129 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 BasicBlock* label_130 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 BasicBlock* label_131 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 BasicBlock* label_132 = BasicBlock::Create(mod->getContext(), "",func_limit2_i16,0);
 
 // Block  (label_127)
 AllocaInst* ptr_133 = new AllocaInst(PointerTy_11, "", label_127);
 ptr_133->setAlignment(8);
 AllocaInst* ptr_134 = new AllocaInst(IntegerType::get(mod->getContext(), 16), "", label_127);
 ptr_134->setAlignment(2);
 AllocaInst* ptr_135 = new AllocaInst(IntegerType::get(mod->getContext(), 16), "", label_127);
 ptr_135->setAlignment(2);
 StoreInst* void_136 = new StoreInst(ptr_x_126, ptr_133, false, label_127);
 void_136->setAlignment(8);
 StoreInst* void_137 = new StoreInst(int16_lower, ptr_134, false, label_127);
 void_137->setAlignment(2);
 StoreInst* void_138 = new StoreInst(int16_upper, ptr_135, false, label_127);
 void_138->setAlignment(2);
 LoadInst* ptr_139 = new LoadInst(ptr_133, "", false, label_127);
 ptr_139->setAlignment(8);
 LoadInst* int16_140 = new LoadInst(ptr_139, "", false, label_127);
 int16_140->setAlignment(2);
 CastInst* int32_141 = new SExtInst(int16_140, IntegerType::get(mod->getContext(), 32), "", label_127);
 LoadInst* int16_142 = new LoadInst(ptr_135, "", false, label_127);
 int16_142->setAlignment(2);
 CastInst* int32_143 = new SExtInst(int16_142, IntegerType::get(mod->getContext(), 32), "", label_127);
 ICmpInst* int1_144 = new ICmpInst(*label_127, ICmpInst::ICMP_SGE, int32_141, int32_143, "");
 BranchInst::Create(label_128, label_129, int1_144, label_127);
 
 // Block  (label_128)
 LoadInst* int16_146 = new LoadInst(ptr_135, "", false, label_128);
 int16_146->setAlignment(2);
 LoadInst* ptr_147 = new LoadInst(ptr_133, "", false, label_128);
 ptr_147->setAlignment(8);
 StoreInst* void_148 = new StoreInst(int16_146, ptr_147, false, label_128);
 void_148->setAlignment(2);
 BranchInst::Create(label_132, label_128);
 
 // Block  (label_129)
 LoadInst* ptr_150 = new LoadInst(ptr_133, "", false, label_129);
 ptr_150->setAlignment(8);
 LoadInst* int16_151 = new LoadInst(ptr_150, "", false, label_129);
 int16_151->setAlignment(2);
 CastInst* int32_152 = new SExtInst(int16_151, IntegerType::get(mod->getContext(), 32), "", label_129);
 LoadInst* int16_153 = new LoadInst(ptr_134, "", false, label_129);
 int16_153->setAlignment(2);
 CastInst* int32_154 = new SExtInst(int16_153, IntegerType::get(mod->getContext(), 32), "", label_129);
 ICmpInst* int1_155 = new ICmpInst(*label_129, ICmpInst::ICMP_SLE, int32_152, int32_154, "");
 BranchInst::Create(label_130, label_131, int1_155, label_129);
 
 // Block  (label_130)
 LoadInst* int16_157 = new LoadInst(ptr_134, "", false, label_130);
 int16_157->setAlignment(2);
 LoadInst* ptr_158 = new LoadInst(ptr_133, "", false, label_130);
 ptr_158->setAlignment(8);
 StoreInst* void_159 = new StoreInst(int16_157, ptr_158, false, label_130);
 void_159->setAlignment(2);
 BranchInst::Create(label_131, label_130);
 
 // Block  (label_131)
 BranchInst::Create(label_132, label_131);
 
 // Block  (label_132)
 ReturnInst::Create(mod->getContext(), label_132);
 
}

// Function: limit2_i32 (func_limit2_i32)
{
 Function::arg_iterator args = func_limit2_i32->arg_begin();
 Value* ptr_x_163 = args++;
 ptr_x_163->setName("x");
 Value* int32_lower = args++;
 int32_lower->setName("lower");
 Value* int32_upper = args++;
 int32_upper->setName("upper");
 
 BasicBlock* label_164 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 BasicBlock* label_165 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 BasicBlock* label_166 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 BasicBlock* label_167 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 BasicBlock* label_168 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 BasicBlock* label_169 = BasicBlock::Create(mod->getContext(), "",func_limit2_i32,0);
 
 // Block  (label_164)
 AllocaInst* ptr_170 = new AllocaInst(PointerTy_7, "", label_164);
 ptr_170->setAlignment(8);
 AllocaInst* ptr_171 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_164);
 ptr_171->setAlignment(4);
 AllocaInst* ptr_172 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_164);
 ptr_172->setAlignment(4);
 StoreInst* void_173 = new StoreInst(ptr_x_163, ptr_170, false, label_164);
 void_173->setAlignment(8);
 StoreInst* void_174 = new StoreInst(int32_lower, ptr_171, false, label_164);
 void_174->setAlignment(4);
 StoreInst* void_175 = new StoreInst(int32_upper, ptr_172, false, label_164);
 void_175->setAlignment(4);
 LoadInst* ptr_176 = new LoadInst(ptr_170, "", false, label_164);
 ptr_176->setAlignment(8);
 LoadInst* int32_177 = new LoadInst(ptr_176, "", false, label_164);
 int32_177->setAlignment(4);
 LoadInst* int32_178 = new LoadInst(ptr_172, "", false, label_164);
 int32_178->setAlignment(4);
 ICmpInst* int1_179 = new ICmpInst(*label_164, ICmpInst::ICMP_SGE, int32_177, int32_178, "");
 BranchInst::Create(label_165, label_166, int1_179, label_164);
 
 // Block  (label_165)
 LoadInst* int32_181 = new LoadInst(ptr_172, "", false, label_165);
 int32_181->setAlignment(4);
 LoadInst* ptr_182 = new LoadInst(ptr_170, "", false, label_165);
 ptr_182->setAlignment(8);
 StoreInst* void_183 = new StoreInst(int32_181, ptr_182, false, label_165);
 void_183->setAlignment(4);
 BranchInst::Create(label_169, label_165);
 
 // Block  (label_166)
 LoadInst* ptr_185 = new LoadInst(ptr_170, "", false, label_166);
 ptr_185->setAlignment(8);
 LoadInst* int32_186 = new LoadInst(ptr_185, "", false, label_166);
 int32_186->setAlignment(4);
 LoadInst* int32_187 = new LoadInst(ptr_171, "", false, label_166);
 int32_187->setAlignment(4);
 ICmpInst* int1_188 = new ICmpInst(*label_166, ICmpInst::ICMP_SLE, int32_186, int32_187, "");
 BranchInst::Create(label_167, label_168, int1_188, label_166);
 
 // Block  (label_167)
 LoadInst* int32_190 = new LoadInst(ptr_171, "", false, label_167);
 int32_190->setAlignment(4);
 LoadInst* ptr_191 = new LoadInst(ptr_170, "", false, label_167);
 ptr_191->setAlignment(8);
 StoreInst* void_192 = new StoreInst(int32_190, ptr_191, false, label_167);
 void_192->setAlignment(4);
 BranchInst::Create(label_168, label_167);
 
 // Block  (label_168)
 BranchInst::Create(label_169, label_168);
 
 // Block  (label_169)
 ReturnInst::Create(mod->getContext(), label_169);
 
}

// Function: limit2_i64 (func_limit2_i64)
{
 Function::arg_iterator args = func_limit2_i64->arg_begin();
 Value* ptr_x_196 = args++;
 ptr_x_196->setName("x");
 Value* int64_lower = args++;
 int64_lower->setName("lower");
 Value* int64_upper = args++;
 int64_upper->setName("upper");
 
 BasicBlock* label_197 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 BasicBlock* label_198 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 BasicBlock* label_199 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 BasicBlock* label_200 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 BasicBlock* label_201 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 BasicBlock* label_202 = BasicBlock::Create(mod->getContext(), "",func_limit2_i64,0);
 
 // Block  (label_197)
 AllocaInst* ptr_203 = new AllocaInst(PointerTy_16, "", label_197);
 ptr_203->setAlignment(8);
 AllocaInst* ptr_204 = new AllocaInst(IntegerType::get(mod->getContext(), 64), "", label_197);
 ptr_204->setAlignment(8);
 AllocaInst* ptr_205 = new AllocaInst(IntegerType::get(mod->getContext(), 64), "", label_197);
 ptr_205->setAlignment(8);
 StoreInst* void_206 = new StoreInst(ptr_x_196, ptr_203, false, label_197);
 void_206->setAlignment(8);
 StoreInst* void_207 = new StoreInst(int64_lower, ptr_204, false, label_197);
 void_207->setAlignment(8);
 StoreInst* void_208 = new StoreInst(int64_upper, ptr_205, false, label_197);
 void_208->setAlignment(8);
 LoadInst* ptr_209 = new LoadInst(ptr_203, "", false, label_197);
 ptr_209->setAlignment(8);
 LoadInst* int64_210 = new LoadInst(ptr_209, "", false, label_197);
 int64_210->setAlignment(8);
 LoadInst* int64_211 = new LoadInst(ptr_205, "", false, label_197);
 int64_211->setAlignment(8);
 ICmpInst* int1_212 = new ICmpInst(*label_197, ICmpInst::ICMP_SGE, int64_210, int64_211, "");
 BranchInst::Create(label_198, label_199, int1_212, label_197);
 
 // Block  (label_198)
 LoadInst* int64_214 = new LoadInst(ptr_205, "", false, label_198);
 int64_214->setAlignment(8);
 LoadInst* ptr_215 = new LoadInst(ptr_203, "", false, label_198);
 ptr_215->setAlignment(8);
 StoreInst* void_216 = new StoreInst(int64_214, ptr_215, false, label_198);
 void_216->setAlignment(8);
 BranchInst::Create(label_202, label_198);
 
 // Block  (label_199)
 LoadInst* ptr_218 = new LoadInst(ptr_203, "", false, label_199);
 ptr_218->setAlignment(8);
 LoadInst* int64_219 = new LoadInst(ptr_218, "", false, label_199);
 int64_219->setAlignment(8);
 LoadInst* int64_220 = new LoadInst(ptr_204, "", false, label_199);
 int64_220->setAlignment(8);
 ICmpInst* int1_221 = new ICmpInst(*label_199, ICmpInst::ICMP_SLE, int64_219, int64_220, "");
 BranchInst::Create(label_200, label_201, int1_221, label_199);
 
 // Block  (label_200)
 LoadInst* int64_223 = new LoadInst(ptr_204, "", false, label_200);
 int64_223->setAlignment(8);
 LoadInst* ptr_224 = new LoadInst(ptr_203, "", false, label_200);
 ptr_224->setAlignment(8);
 StoreInst* void_225 = new StoreInst(int64_223, ptr_224, false, label_200);
 void_225->setAlignment(8);
 BranchInst::Create(label_201, label_200);
 
 // Block  (label_201)
 BranchInst::Create(label_202, label_201);
 
 // Block  (label_202)
 ReturnInst::Create(mod->getContext(), label_202);
 
}

// Function: limit2_u8 (func_limit2_u8)
{
 Function::arg_iterator args = func_limit2_u8->arg_begin();
 Value* ptr_x_229 = args++;
 ptr_x_229->setName("x");
 Value* int8_lower_230 = args++;
 int8_lower_230->setName("lower");
 Value* int8_upper_231 = args++;
 int8_upper_231->setName("upper");
 
 BasicBlock* label_232 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 BasicBlock* label_233 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 BasicBlock* label_234 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 BasicBlock* label_235 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 BasicBlock* label_236 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 BasicBlock* label_237 = BasicBlock::Create(mod->getContext(), "",func_limit2_u8,0);
 
 // Block  (label_232)
 AllocaInst* ptr_238 = new AllocaInst(PointerTy_5, "", label_232);
 ptr_238->setAlignment(8);
 AllocaInst* ptr_239 = new AllocaInst(IntegerType::get(mod->getContext(), 8), "", label_232);
 ptr_239->setAlignment(1);
 AllocaInst* ptr_240 = new AllocaInst(IntegerType::get(mod->getContext(), 8), "", label_232);
 ptr_240->setAlignment(1);
 StoreInst* void_241 = new StoreInst(ptr_x_229, ptr_238, false, label_232);
 void_241->setAlignment(8);
 StoreInst* void_242 = new StoreInst(int8_lower_230, ptr_239, false, label_232);
 void_242->setAlignment(1);
 StoreInst* void_243 = new StoreInst(int8_upper_231, ptr_240, false, label_232);
 void_243->setAlignment(1);
 LoadInst* ptr_244 = new LoadInst(ptr_238, "", false, label_232);
 ptr_244->setAlignment(8);
 LoadInst* int8_245 = new LoadInst(ptr_244, "", false, label_232);
 int8_245->setAlignment(1);
 CastInst* int32_246 = new ZExtInst(int8_245, IntegerType::get(mod->getContext(), 32), "", label_232);
 LoadInst* int8_247 = new LoadInst(ptr_240, "", false, label_232);
 int8_247->setAlignment(1);
 CastInst* int32_248 = new ZExtInst(int8_247, IntegerType::get(mod->getContext(), 32), "", label_232);
 ICmpInst* int1_249 = new ICmpInst(*label_232, ICmpInst::ICMP_SGE, int32_246, int32_248, "");
 BranchInst::Create(label_233, label_234, int1_249, label_232);
 
 // Block  (label_233)
 LoadInst* int8_251 = new LoadInst(ptr_240, "", false, label_233);
 int8_251->setAlignment(1);
 LoadInst* ptr_252 = new LoadInst(ptr_238, "", false, label_233);
 ptr_252->setAlignment(8);
 StoreInst* void_253 = new StoreInst(int8_251, ptr_252, false, label_233);
 void_253->setAlignment(1);
 BranchInst::Create(label_237, label_233);
 
 // Block  (label_234)
 LoadInst* ptr_255 = new LoadInst(ptr_238, "", false, label_234);
 ptr_255->setAlignment(8);
 LoadInst* int8_256 = new LoadInst(ptr_255, "", false, label_234);
 int8_256->setAlignment(1);
 CastInst* int32_257 = new ZExtInst(int8_256, IntegerType::get(mod->getContext(), 32), "", label_234);
 LoadInst* int8_258 = new LoadInst(ptr_239, "", false, label_234);
 int8_258->setAlignment(1);
 CastInst* int32_259 = new ZExtInst(int8_258, IntegerType::get(mod->getContext(), 32), "", label_234);
 ICmpInst* int1_260 = new ICmpInst(*label_234, ICmpInst::ICMP_SLE, int32_257, int32_259, "");
 BranchInst::Create(label_235, label_236, int1_260, label_234);
 
 // Block  (label_235)
 LoadInst* int8_262 = new LoadInst(ptr_239, "", false, label_235);
 int8_262->setAlignment(1);
 LoadInst* ptr_263 = new LoadInst(ptr_238, "", false, label_235);
 ptr_263->setAlignment(8);
 StoreInst* void_264 = new StoreInst(int8_262, ptr_263, false, label_235);
 void_264->setAlignment(1);
 BranchInst::Create(label_236, label_235);
 
 // Block  (label_236)
 BranchInst::Create(label_237, label_236);
 
 // Block  (label_237)
 ReturnInst::Create(mod->getContext(), label_237);
 
}

// Function: limit2_u16 (func_limit2_u16)
{
 Function::arg_iterator args = func_limit2_u16->arg_begin();
 Value* ptr_x_268 = args++;
 ptr_x_268->setName("x");
 Value* int16_lower_269 = args++;
 int16_lower_269->setName("lower");
 Value* int16_upper_270 = args++;
 int16_upper_270->setName("upper");
 
 BasicBlock* label_271 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 BasicBlock* label_272 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 BasicBlock* label_273 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 BasicBlock* label_274 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 BasicBlock* label_275 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 BasicBlock* label_276 = BasicBlock::Create(mod->getContext(), "",func_limit2_u16,0);
 
 // Block  (label_271)
 AllocaInst* ptr_277 = new AllocaInst(PointerTy_11, "", label_271);
 ptr_277->setAlignment(8);
 AllocaInst* ptr_278 = new AllocaInst(IntegerType::get(mod->getContext(), 16), "", label_271);
 ptr_278->setAlignment(2);
 AllocaInst* ptr_279 = new AllocaInst(IntegerType::get(mod->getContext(), 16), "", label_271);
 ptr_279->setAlignment(2);
 StoreInst* void_280 = new StoreInst(ptr_x_268, ptr_277, false, label_271);
 void_280->setAlignment(8);
 StoreInst* void_281 = new StoreInst(int16_lower_269, ptr_278, false, label_271);
 void_281->setAlignment(2);
 StoreInst* void_282 = new StoreInst(int16_upper_270, ptr_279, false, label_271);
 void_282->setAlignment(2);
 LoadInst* ptr_283 = new LoadInst(ptr_277, "", false, label_271);
 ptr_283->setAlignment(8);
 LoadInst* int16_284 = new LoadInst(ptr_283, "", false, label_271);
 int16_284->setAlignment(2);
 CastInst* int32_285 = new ZExtInst(int16_284, IntegerType::get(mod->getContext(), 32), "", label_271);
 LoadInst* int16_286 = new LoadInst(ptr_279, "", false, label_271);
 int16_286->setAlignment(2);
 CastInst* int32_287 = new ZExtInst(int16_286, IntegerType::get(mod->getContext(), 32), "", label_271);
 ICmpInst* int1_288 = new ICmpInst(*label_271, ICmpInst::ICMP_SGE, int32_285, int32_287, "");
 BranchInst::Create(label_272, label_273, int1_288, label_271);
 
 // Block  (label_272)
 LoadInst* int16_290 = new LoadInst(ptr_279, "", false, label_272);
 int16_290->setAlignment(2);
 LoadInst* ptr_291 = new LoadInst(ptr_277, "", false, label_272);
 ptr_291->setAlignment(8);
 StoreInst* void_292 = new StoreInst(int16_290, ptr_291, false, label_272);
 void_292->setAlignment(2);
 BranchInst::Create(label_276, label_272);
 
 // Block  (label_273)
 LoadInst* ptr_294 = new LoadInst(ptr_277, "", false, label_273);
 ptr_294->setAlignment(8);
 LoadInst* int16_295 = new LoadInst(ptr_294, "", false, label_273);
 int16_295->setAlignment(2);
 CastInst* int32_296 = new ZExtInst(int16_295, IntegerType::get(mod->getContext(), 32), "", label_273);
 LoadInst* int16_297 = new LoadInst(ptr_278, "", false, label_273);
 int16_297->setAlignment(2);
 CastInst* int32_298 = new ZExtInst(int16_297, IntegerType::get(mod->getContext(), 32), "", label_273);
 ICmpInst* int1_299 = new ICmpInst(*label_273, ICmpInst::ICMP_SLE, int32_296, int32_298, "");
 BranchInst::Create(label_274, label_275, int1_299, label_273);
 
 // Block  (label_274)
 LoadInst* int16_301 = new LoadInst(ptr_278, "", false, label_274);
 int16_301->setAlignment(2);
 LoadInst* ptr_302 = new LoadInst(ptr_277, "", false, label_274);
 ptr_302->setAlignment(8);
 StoreInst* void_303 = new StoreInst(int16_301, ptr_302, false, label_274);
 void_303->setAlignment(2);
 BranchInst::Create(label_275, label_274);
 
 // Block  (label_275)
 BranchInst::Create(label_276, label_275);
 
 // Block  (label_276)
 ReturnInst::Create(mod->getContext(), label_276);
 
}

// Function: limit2_u32 (func_limit2_u32)
{
 Function::arg_iterator args = func_limit2_u32->arg_begin();
 Value* ptr_x_307 = args++;
 ptr_x_307->setName("x");
 Value* int32_lower_308 = args++;
 int32_lower_308->setName("lower");
 Value* int32_upper_309 = args++;
 int32_upper_309->setName("upper");
 
 BasicBlock* label_310 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 BasicBlock* label_311 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 BasicBlock* label_312 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 BasicBlock* label_313 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 BasicBlock* label_314 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 BasicBlock* label_315 = BasicBlock::Create(mod->getContext(), "",func_limit2_u32,0);
 
 // Block  (label_310)
 AllocaInst* ptr_316 = new AllocaInst(PointerTy_7, "", label_310);
 ptr_316->setAlignment(8);
 AllocaInst* ptr_317 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_310);
 ptr_317->setAlignment(4);
 AllocaInst* ptr_318 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_310);
 ptr_318->setAlignment(4);
 StoreInst* void_319 = new StoreInst(ptr_x_307, ptr_316, false, label_310);
 void_319->setAlignment(8);
 StoreInst* void_320 = new StoreInst(int32_lower_308, ptr_317, false, label_310);
 void_320->setAlignment(4);
 StoreInst* void_321 = new StoreInst(int32_upper_309, ptr_318, false, label_310);
 void_321->setAlignment(4);
 LoadInst* ptr_322 = new LoadInst(ptr_316, "", false, label_310);
 ptr_322->setAlignment(8);
 LoadInst* int32_323 = new LoadInst(ptr_322, "", false, label_310);
 int32_323->setAlignment(4);
 LoadInst* int32_324 = new LoadInst(ptr_318, "", false, label_310);
 int32_324->setAlignment(4);
 ICmpInst* int1_325 = new ICmpInst(*label_310, ICmpInst::ICMP_UGE, int32_323, int32_324, "");
 BranchInst::Create(label_311, label_312, int1_325, label_310);
 
 // Block  (label_311)
 LoadInst* int32_327 = new LoadInst(ptr_318, "", false, label_311);
 int32_327->setAlignment(4);
 LoadInst* ptr_328 = new LoadInst(ptr_316, "", false, label_311);
 ptr_328->setAlignment(8);
 StoreInst* void_329 = new StoreInst(int32_327, ptr_328, false, label_311);
 void_329->setAlignment(4);
 BranchInst::Create(label_315, label_311);
 
 // Block  (label_312)
 LoadInst* ptr_331 = new LoadInst(ptr_316, "", false, label_312);
 ptr_331->setAlignment(8);
 LoadInst* int32_332 = new LoadInst(ptr_331, "", false, label_312);
 int32_332->setAlignment(4);
 LoadInst* int32_333 = new LoadInst(ptr_317, "", false, label_312);
 int32_333->setAlignment(4);
 ICmpInst* int1_334 = new ICmpInst(*label_312, ICmpInst::ICMP_ULE, int32_332, int32_333, "");
 BranchInst::Create(label_313, label_314, int1_334, label_312);
 
 // Block  (label_313)
 LoadInst* int32_336 = new LoadInst(ptr_317, "", false, label_313);
 int32_336->setAlignment(4);
 LoadInst* ptr_337 = new LoadInst(ptr_316, "", false, label_313);
 ptr_337->setAlignment(8);
 StoreInst* void_338 = new StoreInst(int32_336, ptr_337, false, label_313);
 void_338->setAlignment(4);
 BranchInst::Create(label_314, label_313);
 
 // Block  (label_314)
 BranchInst::Create(label_315, label_314);
 
 // Block  (label_315)
 ReturnInst::Create(mod->getContext(), label_315);
 
}

// Function: limit2_u64 (func_limit2_u64)
{
 Function::arg_iterator args = func_limit2_u64->arg_begin();
 Value* ptr_x_342 = args++;
 ptr_x_342->setName("x");
 Value* int64_lower_343 = args++;
 int64_lower_343->setName("lower");
 Value* int64_upper_344 = args++;
 int64_upper_344->setName("upper");
 
 BasicBlock* label_345 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 BasicBlock* label_346 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 BasicBlock* label_347 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 BasicBlock* label_348 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 BasicBlock* label_349 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 BasicBlock* label_350 = BasicBlock::Create(mod->getContext(), "",func_limit2_u64,0);
 
 // Block  (label_345)
 AllocaInst* ptr_351 = new AllocaInst(PointerTy_16, "", label_345);
 ptr_351->setAlignment(8);
 AllocaInst* ptr_352 = new AllocaInst(IntegerType::get(mod->getContext(), 64), "", label_345);
 ptr_352->setAlignment(8);
 AllocaInst* ptr_353 = new AllocaInst(IntegerType::get(mod->getContext(), 64), "", label_345);
 ptr_353->setAlignment(8);
 StoreInst* void_354 = new StoreInst(ptr_x_342, ptr_351, false, label_345);
 void_354->setAlignment(8);
 StoreInst* void_355 = new StoreInst(int64_lower_343, ptr_352, false, label_345);
 void_355->setAlignment(8);
 StoreInst* void_356 = new StoreInst(int64_upper_344, ptr_353, false, label_345);
 void_356->setAlignment(8);
 LoadInst* ptr_357 = new LoadInst(ptr_351, "", false, label_345);
 ptr_357->setAlignment(8);
 LoadInst* int64_358 = new LoadInst(ptr_357, "", false, label_345);
 int64_358->setAlignment(8);
 LoadInst* int64_359 = new LoadInst(ptr_353, "", false, label_345);
 int64_359->setAlignment(8);
 ICmpInst* int1_360 = new ICmpInst(*label_345, ICmpInst::ICMP_UGE, int64_358, int64_359, "");
 BranchInst::Create(label_346, label_347, int1_360, label_345);
 
 // Block  (label_346)
 LoadInst* int64_362 = new LoadInst(ptr_353, "", false, label_346);
 int64_362->setAlignment(8);
 LoadInst* ptr_363 = new LoadInst(ptr_351, "", false, label_346);
 ptr_363->setAlignment(8);
 StoreInst* void_364 = new StoreInst(int64_362, ptr_363, false, label_346);
 void_364->setAlignment(8);
 BranchInst::Create(label_350, label_346);
 
 // Block  (label_347)
 LoadInst* ptr_366 = new LoadInst(ptr_351, "", false, label_347);
 ptr_366->setAlignment(8);
 LoadInst* int64_367 = new LoadInst(ptr_366, "", false, label_347);
 int64_367->setAlignment(8);
 LoadInst* int64_368 = new LoadInst(ptr_352, "", false, label_347);
 int64_368->setAlignment(8);
 ICmpInst* int1_369 = new ICmpInst(*label_347, ICmpInst::ICMP_ULE, int64_367, int64_368, "");
 BranchInst::Create(label_348, label_349, int1_369, label_347);
 
 // Block  (label_348)
 LoadInst* int64_371 = new LoadInst(ptr_352, "", false, label_348);
 int64_371->setAlignment(8);
 LoadInst* ptr_372 = new LoadInst(ptr_351, "", false, label_348);
 ptr_372->setAlignment(8);
 StoreInst* void_373 = new StoreInst(int64_371, ptr_372, false, label_348);
 void_373->setAlignment(8);
 BranchInst::Create(label_349, label_348);
 
 // Block  (label_349)
 BranchInst::Create(label_350, label_349);
 
 // Block  (label_350)
 ReturnInst::Create(mod->getContext(), label_350);
 
}

// Function: func (func_func)
{
 Function::arg_iterator args = func_func->arg_begin();
 Value* int32_y = args++;
 int32_y->setName("y");
 Value* int32_z = args++;
 int32_z->setName("z");
 
 BasicBlock* label_377 = BasicBlock::Create(mod->getContext(), "",func_func,0);
 BasicBlock* label_378 = BasicBlock::Create(mod->getContext(), "",func_func,0);
 BasicBlock* label_379 = BasicBlock::Create(mod->getContext(), "",func_func,0);
 
 // Block  (label_377)
 AllocaInst* ptr_380 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_377);
 ptr_380->setAlignment(4);
 AllocaInst* ptr_381 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_377);
 ptr_381->setAlignment(4);
 StoreInst* void_382 = new StoreInst(int32_y, ptr_380, false, label_377);
 void_382->setAlignment(4);
 StoreInst* void_383 = new StoreInst(int32_z, ptr_381, false, label_377);
 void_383->setAlignment(4);
 LoadInst* int32_384 = new LoadInst(ptr_380, "", false, label_377);
 int32_384->setAlignment(4);
 ICmpInst* int1_385 = new ICmpInst(*label_377, ICmpInst::ICMP_NE, int32_384, const_int32_30, "");
 BranchInst::Create(label_378, label_379, int1_385, label_377);
 
 // Block  (label_378)
 LoadInst* int32_387 = new LoadInst(ptr_381, "", false, label_378);
 int32_387->setAlignment(4);
 ICmpInst* int1_388 = new ICmpInst(*label_378, ICmpInst::ICMP_NE, int32_387, const_int32_30, "");
 BranchInst::Create(label_379, label_378);
 
 // Block  (label_379)
 PHINode* int1_390 = PHINode::Create(IntegerType::get(mod->getContext(), 1), 2, "", label_379);
 int1_390->addIncoming(const_int1_33, label_377);
 int1_390->addIncoming(int1_388, label_378);
 
 CastInst* int32_391 = new ZExtInst(int1_390, IntegerType::get(mod->getContext(), 32), "", label_379);
 ReturnInst::Create(mod->getContext(), int32_391, label_379);
 
}

// Function: test_AND (func_test_AND)
{
 
 BasicBlock* label_393 = BasicBlock::Create(mod->getContext(), "",func_test_AND,0);
 
 // Block  (label_393)
 AllocaInst* ptr_res = new AllocaInst(IntegerType::get(mod->getContext(), 32), "res", label_393);
 ptr_res->setAlignment(4);
 AllocaInst* ptr_y = new AllocaInst(IntegerType::get(mod->getContext(), 32), "y", label_393);
 ptr_y->setAlignment(4);
 AllocaInst* ptr_z = new AllocaInst(IntegerType::get(mod->getContext(), 32), "z", label_393);
 ptr_z->setAlignment(4);
 StoreInst* void_394 = new StoreInst(const_int32_30, ptr_res, false, label_393);
 void_394->setAlignment(4);
 StoreInst* void_395 = new StoreInst(const_int32_30, ptr_y, false, label_393);
 void_395->setAlignment(4);
 StoreInst* void_396 = new StoreInst(const_int32_30, ptr_z, false, label_393);
 void_396->setAlignment(4);
 CallInst* int32_397 = CallInst::Create(func_mksym_i32, "", label_393);
 int32_397->setCallingConv(CallingConv::C);
 int32_397->setTailCall(false);
 AttributeSet int32_397_PAL;
 int32_397->setAttributes(int32_397_PAL);
 
 StoreInst* void_398 = new StoreInst(int32_397, ptr_y, false, label_393);
 void_398->setAlignment(4);
 CallInst* int32_399 = CallInst::Create(func_mksym_i32, "", label_393);
 int32_399->setCallingConv(CallingConv::C);
 int32_399->setTailCall(false);
 AttributeSet int32_399_PAL;
 int32_399->setAttributes(int32_399_PAL);
 
 StoreInst* void_400 = new StoreInst(int32_399, ptr_z, false, label_393);
 void_400->setAlignment(4);
 LoadInst* int32_401 = new LoadInst(ptr_y, "", false, label_393);
 int32_401->setAlignment(4);
 LoadInst* int32_402 = new LoadInst(ptr_z, "", false, label_393);
 int32_402->setAlignment(4);
 std::vector<Value*> int32_403_params;
 int32_403_params.push_back(int32_401);
 int32_403_params.push_back(int32_402);
 CallInst* int32_403 = CallInst::Create(func_func, int32_403_params, "", label_393);
 int32_403->setCallingConv(CallingConv::C);
 int32_403->setTailCall(false);
 AttributeSet int32_403_PAL;
 int32_403->setAttributes(int32_403_PAL);
 
 StoreInst* void_404 = new StoreInst(int32_403, ptr_res, false, label_393);
 void_404->setAlignment(4);
 LoadInst* int32_405 = new LoadInst(ptr_y, "", false, label_393);
 int32_405->setAlignment(4);
 LoadInst* int32_406 = new LoadInst(ptr_z, "", false, label_393);
 int32_406->setAlignment(4);
 LoadInst* int32_407 = new LoadInst(ptr_res, "", false, label_393);
 int32_407->setAlignment(4);
 std::vector<Value*> void_408_params;
 void_408_params.push_back(int32_405);
 void_408_params.push_back(int32_406);
 void_408_params.push_back(int32_407);
 CallInst* void_408 = CallInst::Create(func_gen_func, void_408_params, "", label_393);
 void_408->setCallingConv(CallingConv::C);
 void_408->setTailCall(false);
 AttributeSet void_408_PAL;
 void_408->setAttributes(void_408_PAL);
 
 ReturnInst::Create(mod->getContext(), label_393);
 
}

// Function: select (func_select)
{
 Function::arg_iterator args = func_select->arg_begin();
 Value* int32_x = args++;
 int32_x->setName("x");
 Value* int32_y_410 = args++;
 int32_y_410->setName("y");
 
 BasicBlock* label_411 = BasicBlock::Create(mod->getContext(), "",func_select,0);
 
 // Block  (label_411)
 AllocaInst* ptr_412 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_411);
 ptr_412->setAlignment(4);
 AllocaInst* ptr_413 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_411);
 ptr_413->setAlignment(4);
 AllocaInst* ptr_r = new AllocaInst(IntegerType::get(mod->getContext(), 32), "r", label_411);
 ptr_r->setAlignment(4);
 StoreInst* void_414 = new StoreInst(int32_x, ptr_412, false, label_411);
 void_414->setAlignment(4);
 StoreInst* void_415 = new StoreInst(int32_y_410, ptr_413, false, label_411);
 void_415->setAlignment(4);
 LoadInst* int32_416 = new LoadInst(ptr_412, "", false, label_411);
 int32_416->setAlignment(4);
 LoadInst* int32_417 = new LoadInst(ptr_413, "", false, label_411);
 int32_417->setAlignment(4);
 ICmpInst* int1_418 = new ICmpInst(*label_411, ICmpInst::ICMP_SLT, int32_416, int32_417, "");
 SelectInst* int32_419 = SelectInst::Create(int1_418, const_int32_34, const_int32_35, "", label_411);
 StoreInst* void_420 = new StoreInst(int32_419, ptr_r, false, label_411);
 void_420->setAlignment(4);
 LoadInst* int32_421 = new LoadInst(ptr_r, "", false, label_411);
 int32_421->setAlignment(4);
 ReturnInst::Create(mod->getContext(), int32_421, label_411);
 
}

// Function: test_SELECT (func_test_SELECT)
{
 
 BasicBlock* label_423 = BasicBlock::Create(mod->getContext(), "",func_test_SELECT,0);
 
 // Block  (label_423)
 AllocaInst* ptr_x_424 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "x", label_423);
 ptr_x_424->setAlignment(4);
 AllocaInst* ptr_y_425 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "y", label_423);
 ptr_y_425->setAlignment(4);
 AllocaInst* ptr_r_426 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "r", label_423);
 ptr_r_426->setAlignment(4);
 StoreInst* void_427 = new StoreInst(const_int32_30, ptr_x_424, false, label_423);
 void_427->setAlignment(4);
 StoreInst* void_428 = new StoreInst(const_int32_36, ptr_y_425, false, label_423);
 void_428->setAlignment(4);
 CallInst* int32_429 = CallInst::Create(func_mksym_i32, "", label_423);
 int32_429->setCallingConv(CallingConv::C);
 int32_429->setTailCall(false);
 AttributeSet int32_429_PAL;
 int32_429->setAttributes(int32_429_PAL);
 
 StoreInst* void_430 = new StoreInst(int32_429, ptr_x_424, false, label_423);
 void_430->setAlignment(4);
 CallInst* int32_431 = CallInst::Create(func_mksym_i32, "", label_423);
 int32_431->setCallingConv(CallingConv::C);
 int32_431->setTailCall(false);
 AttributeSet int32_431_PAL;
 int32_431->setAttributes(int32_431_PAL);
 
 StoreInst* void_432 = new StoreInst(int32_431, ptr_y_425, false, label_423);
 void_432->setAlignment(4);
 LoadInst* int32_433 = new LoadInst(ptr_x_424, "", false, label_423);
 int32_433->setAlignment(4);
 LoadInst* int32_434 = new LoadInst(ptr_y_425, "", false, label_423);
 int32_434->setAlignment(4);
 std::vector<Value*> int32_435_params;
 int32_435_params.push_back(int32_433);
 int32_435_params.push_back(int32_434);
 CallInst* int32_435 = CallInst::Create(func_select, int32_435_params, "", label_423);
 int32_435->setCallingConv(CallingConv::C);
 int32_435->setTailCall(false);
 AttributeSet int32_435_PAL;
 int32_435->setAttributes(int32_435_PAL);
 
 StoreInst* void_436 = new StoreInst(int32_435, ptr_r_426, false, label_423);
 void_436->setAlignment(4);
 LoadInst* int32_437 = new LoadInst(ptr_x_424, "", false, label_423);
 int32_437->setAlignment(4);
 LoadInst* int32_438 = new LoadInst(ptr_y_425, "", false, label_423);
 int32_438->setAlignment(4);
 LoadInst* int32_439 = new LoadInst(ptr_r_426, "", false, label_423);
 int32_439->setAlignment(4);
 std::vector<Value*> void_440_params;
 void_440_params.push_back(int32_437);
 void_440_params.push_back(int32_438);
 void_440_params.push_back(int32_439);
 CallInst* void_440 = CallInst::Create(func_gen_select, void_440_params, "", label_423);
 void_440->setCallingConv(CallingConv::C);
 void_440->setTailCall(false);
 AttributeSet void_440_PAL;
 void_440->setAttributes(void_440_PAL);
 
 ReturnInst::Create(mod->getContext(), label_423);
 
}

// Function: the_switch (func_the_switch)
{
 Function::arg_iterator args = func_the_switch->arg_begin();
 Value* int32_key = args++;
 int32_key->setName("key");
 
 BasicBlock* label_442 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 BasicBlock* label_443 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 BasicBlock* label_444 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 BasicBlock* label_445 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 BasicBlock* label_446 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 BasicBlock* label_447 = BasicBlock::Create(mod->getContext(), "",func_the_switch,0);
 
 // Block  (label_442)
 AllocaInst* ptr_448 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_442);
 ptr_448->setAlignment(4);
 AllocaInst* ptr_449 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_442);
 ptr_449->setAlignment(4);
 StoreInst* void_450 = new StoreInst(int32_key, ptr_449, false, label_442);
 void_450->setAlignment(4);
 LoadInst* int32_451 = new LoadInst(ptr_449, "", false, label_442);
 int32_451->setAlignment(4);
 SwitchInst* void_452 = SwitchInst::Create(int32_451, label_446, 3, label_442);
 void_452->addCase(const_int32_32, label_443);
 void_452->addCase(const_int32_36, label_444);
 void_452->addCase(const_int32_34, label_445);
 
 
 // Block  (label_443)
 StoreInst* void_453 = new StoreInst(const_int32_37, ptr_448, false, label_443);
 BranchInst::Create(label_447, label_443);
 
 // Block  (label_444)
 StoreInst* void_455 = new StoreInst(const_int32_38, ptr_448, false, label_444);
 BranchInst::Create(label_447, label_444);
 
 // Block  (label_445)
 StoreInst* void_457 = new StoreInst(const_int32_39, ptr_448, false, label_445);
 BranchInst::Create(label_447, label_445);
 
 // Block  (label_446)
 StoreInst* void_459 = new StoreInst(const_int32_40, ptr_448, false, label_446);
 BranchInst::Create(label_447, label_446);
 
 // Block  (label_447)
 LoadInst* int32_461 = new LoadInst(ptr_448, "", false, label_447);
 ReturnInst::Create(mod->getContext(), int32_461, label_447);
 
}

// Function: test_the_switch (func_test_the_switch)
{
 
 BasicBlock* label_463 = BasicBlock::Create(mod->getContext(), "",func_test_the_switch,0);
 
 // Block  (label_463)
 AllocaInst* ptr_key = new AllocaInst(IntegerType::get(mod->getContext(), 32), "key", label_463);
 ptr_key->setAlignment(4);
 AllocaInst* ptr_res_464 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "res", label_463);
 ptr_res_464->setAlignment(4);
 StoreInst* void_465 = new StoreInst(const_int32_32, ptr_key, false, label_463);
 void_465->setAlignment(4);
 LoadInst* int32_466 = new LoadInst(ptr_key, "", false, label_463);
 int32_466->setAlignment(4);
 CallInst* int32_467 = CallInst::Create(func_the_switch, int32_466, "", label_463);
 int32_467->setCallingConv(CallingConv::C);
 int32_467->setTailCall(false);
 AttributeSet int32_467_PAL;
 int32_467->setAttributes(int32_467_PAL);
 
 StoreInst* void_468 = new StoreInst(int32_467, ptr_res_464, false, label_463);
 void_468->setAlignment(4);
 LoadInst* int32_469 = new LoadInst(ptr_key, "", false, label_463);
 int32_469->setAlignment(4);
 LoadInst* int32_470 = new LoadInst(ptr_res_464, "", false, label_463);
 int32_470->setAlignment(4);
 std::vector<Value*> void_471_params;
 void_471_params.push_back(int32_469);
 void_471_params.push_back(int32_470);
 CallInst* void_471 = CallInst::Create(func_gen_the_switch, void_471_params, "", label_463);
 void_471->setCallingConv(CallingConv::C);
 void_471->setTailCall(false);
 AttributeSet void_471_PAL;
 void_471->setAttributes(void_471_PAL);
 
 ReturnInst::Create(mod->getContext(), label_463);
 
}

return mod;
}
