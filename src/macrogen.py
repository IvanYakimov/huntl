#!/usr/bin/env python
import fileinput
import sys
#see: https://www.tutorialspoint.com/python/python_xml_processing.htm
import xml.sax
intTy = "$INT"
poly = []
simple = []
unsorted = []
prefix = []
postfix = []

#parsing args
argnum = len(sys.argv)
if argnum  == 1:
    pass
elif argnum == 2:
    arg1 = sys.argv[1]
    pass
else:
    print "wrong number of arguments: " + str(argnum)
    sys.exit()
# see: https://interactivepython.org/runestone/static/pythonds/BasicDS/ImplementingaStackinPython.html
class Stack:
     def __init__(self):
         self.items = []
     def isEmpty(self):
         return self.items == []
     def push(self, item):
         self.items.append(item)
     def pop(self):
         return self.items.pop()
     def top(self):
         return self.items[len(self.items)-1]
     def size(self):
         return len(self.items)
    
tagStack = Stack()

# parser

class FunctionHandler (xml.sax.ContentHandler):
    def __init__(self):
        key = ""

    def startElement(self, tag, atts):
        tagStack.push(tag)
        if tag == "func":
            self.name = atts["name"].strip()
        elif tag == "collection":
            self.key = atts["type"].strip()
            
    def endElement(self, tag):
        if tag == "func":
            global poly
            global simple
            global unsorted
            func = (self.ret, self.name, self.header)
            if self.key == "poly":
                poly.append(func)
            elif self.key == "simple":
                simple.append(func)
            else:
                unsorted.append(func)
        tagStack.pop()
            
    def characters(self, str):
        global prefix
        global postfix
        if tagStack.top() == "prefix":
            prefix.append(str.strip())
        elif tagStack.top() == "postfix":
            postfix.append(str.strip())
        elif tagStack.top() == "ret":
            self.ret = str.strip()
        elif tagStack.top() == "header":
            self.header = str.strip()
    
parser = xml.sax.make_parser()
parser.setFeature(xml.sax.handler.feature_namespaces,0)
handler = FunctionHandler()
parser.setContentHandler(handler)

parser.parse(sys.stdin)

# generator

header = open('c-driver.hpp', 'w')
source = open('c-driver.cpp', 'w')

print "// Attention: this file is automatically generated, do not change it manually!"

def printlist(f, l):
    for s in l:
        f.write(s.strip() + "\n")

printlist(header, prefix)

def printcolon(dest):
    dest.write(";\n")
    
def printhead(dest, ret, name, args):
    dest.write("\t" + ret + " " + name + "(" + args + ")")

def printpoly(dest, ret, name, args):
    pname = name + "_$INT"
    for i in ["i8", "i16", "i32", "i64"]:
        printhead(dest, ret, pname.replace("$INT", i), args.replace("$INT", i))
        printcolon(dest)

def printsimple(dest, ret, name, args):
    printhead(dest, ret, name, args)
    printcolon(dest)


def printCollection(dest, title, collection, printer):
    dest.write( "\t// " + title + "\n")
    for func in collection:
        ret = func[0]
        name = func[1]
        args = func[2]
        dest.write("\t//" + name + "\n")
        printer(dest, ret, name, args)

printCollection(header, "POLY", poly, printpoly)
printCollection(header, "SIMPLE", simple, printsimple)

printlist(header, postfix)
