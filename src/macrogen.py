#!/usr/bin/env python
import fileinput
import sys
#see: https://www.tutorialspoint.com/python/python_xml_processing.htm
import xml.sax
intTy = "$INT"
polymorphic = []
simple = []
unsorted = []
prefix = []
postfix = []

# see: https://interactivepython.org/runestone/static/pythonds/BasicDS/ImplementingaStackinPython.html
class stack:
     def __init__(self):
         self.items = []
     def isEmpty(self):
         return self.items == []
     def push(self, item):
         self.items.append(item)
     def pop(self):
         return self.items.pop()
     def top(self):
         return self.items[len(self.items)-1]
     def size(self):
         return len(self.items)

tagStack = stack()

class FunctionHandler (xml.sax.ContentHandler):
    def __init__(self):
        key = ""

    def startElement(self, tag, atts):
        tagStack.push(tag)
        if tag == "func":
            self.name = atts["name"]
        elif tag == "collection":
            self.key = atts["type"]
            
    def endElement(self, tag):
        global polymorphic
        global simple
        global unsorted
        if tag == "func":
            func = (self.name, self.ret, self.header)
            if self.key == "polymorphic":
                polymorphic.append(func)
            elif self.key == "simple":
                simple.append(func)
            else:
                unsorted.append(func)
        tagStack.pop()
            
    def characters(self, str):
        global prefix
        global postfix
        if tagStack.top() == "prefix":
            prefix.append(str.strip())
        elif tagStack.top() == "postfix":
            postfix.append(str.strip())
        if tagStack.top() == "ret":
            self.ret = str
        elif tagStack.top() == "header":
            self.header = str
    
parser = xml.sax.make_parser()
parser.setFeature(xml.sax.handler.feature_namespaces,0)
handler = FunctionHandler()
parser.setContentHandler(handler)

parser.parse(sys.stdin)

print "// Attention: this file is automatically generated, do not change it manually!"

for s in prefix:
    print s.strip()

print "\t// POLYMORPHIC FUNCTIONS:\n"
for func in polymorphic:
    name = func[0].strip()
    ret = func[1].strip()
    header = func[2].strip()
    print "\t//" + name
    for i in ["i8", "i16", "i32", "i64"]:
        print "\t" + ret + " " + name + header.replace("$INT", i) + ";"
    print ""

for s in postfix:
    print s.strip()
