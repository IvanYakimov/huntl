#!/usr/bin/env python
import fileinput
import sys
#see: https://www.tutorialspoint.com/python/python_xml_processing.htm
import xml.sax
intTy = "$INT"
polymorphic = []
simple = []
unsorted = []
prefix = []
postfix = []

#parsing args
isheader = False
argnum = len(sys.argv)
if argnum  == 1:
    print "use --header or --source argument"
    sys.exit()
elif argnum == 2:
    arg1 = sys.argv[1]
    if arg1 == "--header":
        isheader = True
    elif arg1 == "--source":
        isheader = False
    else:
        print "bad arg " + arg1
        sys.exit()
else:
    print "wrong number of arguments: " + str(argnum)
    sys.exit()

# see: https://interactivepython.org/runestone/static/pythonds/BasicDS/ImplementingaStackinPython.html
class stack:
     def __init__(self):
         self.items = []
     def isEmpty(self):
         return self.items == []
     def push(self, item):
         self.items.append(item)
     def pop(self):
         return self.items.pop()
     def top(self):
         return self.items[len(self.items)-1]
     def size(self):
         return len(self.items)

tagStack = stack()

# parser

class FunctionHandler (xml.sax.ContentHandler):
    def __init__(self):
        key = ""

    def startElement(self, tag, atts):
        tagStack.push(tag)
        if tag == "func":
            self.name = atts["name"].strip()
        elif tag == "collection":
            self.key = atts["type"].strip()
            
    def endElement(self, tag):
        if tag == "func":
            global polymorphic
            global simple
            global unsorted
            func = (self.name, self.header)
            if self.key == "polymorphic":
                polymorphic.append(func)
            elif self.key == "simple":
                simple.append(func)
            else:
                unsorted.append(func)
        tagStack.pop()
            
    def characters(self, str):
        global prefix
        global postfix
        if tagStack.top() == "prefix":
            prefix.append(str.strip())
        elif tagStack.top() == "postfix":
            postfix.append(str.strip())
        elif tagStack.top() == "header":
            self.header = str.strip()
    
parser = xml.sax.make_parser()
parser.setFeature(xml.sax.handler.feature_namespaces,0)
handler = FunctionHandler()
parser.setContentHandler(handler)

parser.parse(sys.stdin)

# generator

print "// Attention: this file is automatically generated, do not change it manually!"

def printlist(l):
    for s in l:
        print s.strip()

printlist(prefix)

def printpoly(header):
    for i in ["i8", "i16", "i32", "i64"]:
        print "\t" + header.replace("$INT", i) + ";"

def printsimple(header):
    print "\t" + header + ";"

def printCollection(title, collection, p):
    print "\t// " + title
    for func in collection:
        name = func[0]
        header = func[1].replace("$NAME", name)
        print "\t//" + name
        p(header)

printCollection("POLYMORPHIC", polymorphic, printpoly)
printCollection("SIMPLE", simple, printsimple)

printlist(postfix)
